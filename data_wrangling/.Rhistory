################################################
################ Web Scraping ##################
################################################
library(rvest)
# Example: Lego Movie
lego_movie <- read_html("http://www.imdb.com/title/tt1490017/")
lego_movie
rating <- lego_movie %>%
html_nodes("strong span") %>%
html_text() %>%
as.numeric()
rating
cast <- lego_movie %>%
html_nodes("#titleCast .primary_photo img") %>%
html_attr("alt")
cast
# Example: html_table
births <- read_html("https://www.ssa.gov/oact/babynames/numberUSbirths.html")
html_table(html_nodes(births, "table"))[[1]] %>%
apply(., c(1,2), str_replace_all, ",", "") %>%
apply(., c(1,2), as.numeric)
require(stringr)
html_table(html_nodes(births, "table"))[[1]] %>%
apply(., c(1,2), str_replace_all, ",", "") %>%
apply(., c(1,2), as.numeric)
html_table(html_nodes(births, "table"))[[1]]
# EXAMPLE: 100 popular films released in 2016.
# following https://www.analyticsvidhya.com/blog/2017/03/beginners-guide-on-web-scraping-in-r-using-rvest-with-hands-on-knowledge/
url <- 'http://www.imdb.com/search/title?count=100&release_date=2016,2016&title_type=feature'
webpage <- read_html(url)
rank_data_html <- html_nodes(webpage,'.text-primary')
rank_data <- html_text(rank_data_html)
head(rank_data)
rank_data<-as.numeric(rank_data)
head(rank_data)
rank_data <- html_nodes(webpage,'.text-primary') %>%
html_text() %>%
as.numeric()
head(rank_data)
title_data <- html_nodes(webpage,'.lister-item-header a') %>%
html_text()
head(title_data)
description_data <- html_nodes(webpage,'.ratings-bar + .text-muted') %>%
html_text() %>%
str_remove_all(.,"\n") %>%
str_trim()
head(description_data)
runtime_data <- html_nodes(webpage,'.text-muted .runtime') %>%
html_text() %>%
str_remove_all(" min") %>%
as.numeric()
head(runtime_data)
genre_data <- html_nodes(webpage,'.genre') %>%
html_text() %>%
str_remove_all("\n") %>%
str_trim() %>%
sapply(., function(x){str_split(x,", ")[[1]][1]}) %>%
#taking only the first genre of each movie
as.factor()
head(genre_data)
levels(genre_data)
#Using CSS selectors to scrape the IMDB rating section
rating_data <- html_nodes(webpage,'.ratings-imdb-rating strong') %>%
html_text() %>%
as.numeric()
head(rating_data)
votes_data <- html_nodes(webpage,'.sort-num_votes-visible span:nth-child(2)') %>%
html_text() %>%
str_replace_all(., ",","") %>%
as.numeric()
head(votes_data)
#Using CSS selectors to scrape the directors section
directors_data <- html_nodes(webpage,'.text-muted+ p a:nth-child(1)') %>%
html_text() %>%
as.factor()
head(directors_data)
actors_data <- html_nodes(webpage,'.lister-item-content .ghost+ a') %>%
html_text() %>%
as.factor()
head(actors_data)
metascore_data <- html_nodes(webpage,'.metascore') %>%
html_text() %>%
str_trim() %>%
as.numeric()
length(metascore_data) # not 100
#put NA's
metascore_data2 <- rep(NA,100)
metascore_data2[-c(36,65,69,80)] <- metascore_data
metascore_data <- as.numeric(metascore_data2)
summary(metascore_data)
gross_data <- html_nodes(webpage,'.ghost~ .text-muted+ span') %>%
html_text() %>%
str_replace(.,"M","") %>%
substring(., 2, 6)
head(gross_data)
length(gross_data)
#put NA's
gross_data2 <- rep(NA, 100)
gross_data2[-c(92:100)] <- gross_data
gross_data <- as.numeric(gross_data2)
length(gross_data)
movies_df<-data.frame(Rank = rank_data, Title = title_data,
Description = description_data, Runtime = runtime_data,
Genre = genre_data, Rating = rating_data,
Metascore = metascore_data, Votes = votes_data,
Gross_Earning_in_Mil = gross_data,
Director = directors_data, Actor = actors_data)
library(ggplot2)
qplot(data = movies_df,Runtime,fill = Genre,bins = 30)
ggplot(movies_df,aes(x=Runtime,y=Rating))+
geom_point(aes(size=Votes,col=Genre))
ggplot(movies_df,aes(x=Runtime,y=Gross_Earning_in_Mil))+
geom_point(aes(size=Rating,col=Genre))
getwd()
